import tensorflow as tf
tf.test.is_gpu_available()
exit()
import pybullet as p
physicsClient = p.connect(p.GUI) 
rbx1 = p.loadURDF("/home/ubuntu/src/rbx1/rbx1_urdf/urdf/rbx1_urdf.urdf")
for x in range (0, p.getNumJoints(0)):
  p.getJointInfo(rbx1, x)
p.setJointMotorControlArray(rbx1, 
	[1,2,3,4,5], 
	p.POSITION_CONTROL, 
	targetPositions=[1.57, 1.57, 1.57, 1.57, 1.57])
p.stepSimulation()
p.resetBasePositionAndOirentation(rbx1)
p.resetBasePositionAndOrientation(rbx1)
p.resetBasePositionAndOrientation(rbx1, [0,0,0])
p.resetBasePositionAndOrientation(rbx1, [0,0,0], [0,0,0,1])
import pybullet as p
physicsClient = p.connect(p.GUI) 
rbx1 = p.loadURDF("/home/ubuntu/src/rbx1/rbx1_urdf/urdf/rbx1_urdf.urdf", useFixedBase=True)
for x in range (0, p.getNumJoints(0)):
    p.getJointInfo(rbx1, x)
p.setJointMotorControlArray(rbx1, 
	[1,2,3,4,5], 
	p.POSITION_CONTROL, 
	targetPositions=[1.57, 1.57, 1.57, 1.57, 1.57])
p.stepSimulation()
exit
import tensorflow as tf
print(tf.__version__)
tf.test.is_gpu_available()
exit()
exit(
exit()
)
exit()
0.1 * 6
[0.1] * 6
range(1)
thing = [0,1,2,3]
thing
type(thing)
thing[-1:]
type(thing[-1:])
thing[-1:][0]
type(thing[-1:][0])
x = list(range(12)
)
x
x[-6:]
newvals = list(range(6))
newvals
newvals = newvals * 100
newvals
newvals = list(range(6))
x[-6:] = newvals
x
