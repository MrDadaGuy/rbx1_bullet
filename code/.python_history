import tensorflow as tf
tf.test.is_gpu_available()
exit()
import pybullet as p
physicsClient = p.connect(p.GUI) 
rbx1 = p.loadURDF("/home/ubuntu/src/rbx1/rbx1_urdf/urdf/rbx1_urdf.urdf")
for x in range (0, p.getNumJoints(0)):
  p.getJointInfo(rbx1, x)
p.setJointMotorControlArray(rbx1, 
	[1,2,3,4,5], 
	p.POSITION_CONTROL, 
	targetPositions=[1.57, 1.57, 1.57, 1.57, 1.57])
p.stepSimulation()
p.resetBasePositionAndOirentation(rbx1)
p.resetBasePositionAndOrientation(rbx1)
p.resetBasePositionAndOrientation(rbx1, [0,0,0])
p.resetBasePositionAndOrientation(rbx1, [0,0,0], [0,0,0,1])
import pybullet as p
physicsClient = p.connect(p.GUI) 
rbx1 = p.loadURDF("/home/ubuntu/src/rbx1/rbx1_urdf/urdf/rbx1_urdf.urdf", useFixedBase=True)
for x in range (0, p.getNumJoints(0)):
    p.getJointInfo(rbx1, x)
p.setJointMotorControlArray(rbx1, 
	[1,2,3,4,5], 
	p.POSITION_CONTROL, 
	targetPositions=[1.57, 1.57, 1.57, 1.57, 1.57])
p.stepSimulation()
exit
import tensorflow as tf
print(tf.__version__)
tf.test.is_gpu_available()
exit()
exit(
exit()
)
exit()
0.1 * 6
[0.1] * 6
range(1)
thing = [0,1,2,3]
thing
type(thing)
thing[-1:]
type(thing[-1:])
thing[-1:][0]
type(thing[-1:][0])
x = list(range(12)
)
x
x[-6:]
newvals = list(range(6))
newvals
newvals = newvals * 100
newvals
newvals = list(range(6))
x[-6:] = newvals
x
0.05 / 2
0.05 //2
import numpy as np
x = {'target': array([0.30108393, 0.3011266 , 0.02732563]), 'ee_pos': array([0.30464628, 0.30472348, 0.12029884])}
x
x = {'target': np.array([0.30108393, 0.3011266 , 0.02732563]), 'ee_pos': np.array([0.30464628, 0.30472348, 0.12029884])}
x
x['target']
x['ee_pos']
x['target'] - x['ee_pos']
x['target'] [:1] #- x['ee_pos']
x['target'] [1:] #- x['ee_pos']
x = {1,2,3}
x
x[1]
x = [1,2,3]
x
x[1]
x[1:]
x [:2]
import numpy as np
np.array([0.30050749 0.30050604 0.12916186])
ee = np.array([[0.30050749 0.30050604 0.12916186])
ee = np.array([[0.30050749, 0.30050604, 0.12916186])
ee = np.array([0.30050749, 0.30050604, 0.12916186])
target = np.array([0.325   0.325   0.02999]) 
target = np.array([0.325,   0.325,   0.02999]) 
np.linalg.norm(ee - target)
np.linalg.norm(ee[:2] - target[:2]
)
adjtarget = target
adjtarget[2] += .15
np.linalg.norm(ee - target)
np.linalg.norm(ee - adjtarget)
target
adjtarget
x = {}
type(x)
x.['collision'] = True
x
x['collision'] = True
x
x.contains('dsf')
if 'collision' is in x:
if 'collision'  in x:
  print("yayyiiee")
if 'scrot' in x:
  print("ooww")
[0.03] * 12
